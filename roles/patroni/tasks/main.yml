---
- name: Collect facts for Alt linux
  when: ansible_os_family in ["Altlinux"]
  block:
    - name: Collect installed RPM packages # noqa: command-instead-of-module
      ansible.builtin.command: rpm -qa --qf '%{NAME} %{VERSION}-%{RELEASE}\n'
      register: patroni_rpm_output
      changed_when: false
      failed_when: patroni_rpm_output.rc != 0

    - name: Parse installed packages into a dictionary
      ansible.builtin.set_fact:
        patroni_installed_packages: >-
          {{
            dict(
              patroni_rpm_output.stdout_lines | map('split', ' ', 1) | list
            )
          }}

- name: Collect package facts
  when: not ansible_os_family in ["Altlinux"]
  ansible.builtin.package_facts:
  register: patroni_package_facts_result

- name: Load watchdog kernel module
  community.general.modprobe:
    name: softdog
    state: present

- name: Chown postgres watchdog
  ansible.builtin.file:
    path: /dev/watchdog
    owner: postgres
    state: file

- name: Make kernel watchdog device available for patroni
  ansible.builtin.template:
    src: patroni-watchdog.service.j2
    dest: /etc/systemd/system/patroni-watchdog.service
    owner: root
    group: root
    mode: "0644"
  notify:
    - Restart patroni-watchdog

# Dirty hack. See https://bugs.launchpad.net/ubuntu/+source/watchdog/+bug/1448924
- name: Enable watchdog daemon to start on boot
  ansible.builtin.file:
    src: /lib/systemd/system/watchdog.service
    dest: /etc/systemd/system/multi-user.target.wants/watchdog.service
    state: link
  when:
    - ansible_distribution in ('Ubuntu', 'Debian')
    - ansible_distribution_release in ('xenial', 'jessie')

- name: Force systemd to reread configs
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: Install patroni-tantor-all package if not installed
  when: # ('patroni-tantor-all' not in ansible_facts.packages) or ('patroni-tantor-all' not in patroni_installed_packages)
    - ('patroni-tantor-all' not in (ansible_facts.packages | default({})))
    - ('patroni-tantor-all' not in (patroni_installed_packages | default({})))
  block:
    - name: Install patroni-tantor-all (RHEL-like systems)
      when: ansible_os_family in ["RED", "Centos", "Rocky", "RedHat"]
      ansible.builtin.dnf:
        name: >-
          {{
            'patroni-tantor-all-' + patroni_package_version
            if patroni_package_version | length > 0
            else
            'patroni-tantor-all'
          }}
        state: present
        allow_downgrade: true

    - name: Install patroni-tantor-all (Alt Linux)
      when: ansible_os_family in ["Altlinux"]
      community.general.apt_rpm:
        name: >-
          {{
            'patroni-tantor-all-' + patroni_package_version
            if patroni_package_version | length > 0
            else
            'patroni-tantor-all'
          }}
        state: present

    - name: Install patroni-tantor-all (Debian-like systems)
      when: ansible_os_family in ["Astra Linux", "Debian"]
      ansible.builtin.apt:
        name: >-
          {{
            'patroni-tantor-all=' + patroni_package_version
            if patroni_package_version | length > 0
            else
            'patroni-tantor-all'
          }}
        state: present
        allow_downgrade: true

- name: Upgrade patroni-tantor-all package if it is installed
  when:
    - ('patroni-tantor-all' in (ansible_facts.packages | default({}))) or ('patroni-tantor-all' in (patroni_installed_packages | default({})))
    - patroni_package_version != ""
    - ('patroni-tantor-all' not in (ansible_facts.packages | default({}))) or ('patroni-tantor-all' not in (patroni_installed_packages | default({})))

  block:
    - name: Check if this node is the master
      ansible.builtin.command: >-
        /opt/tantor/usr/bin/patronictl
        -c {{ patroni_config_dir }}/{{ patroni_name | default(inventory_hostname) }}.yml list
        -f json
      register: patroni_status
      changed_when: false
      failed_when: patroni_status.rc != 0

    - name: Set patroni_is_master fact
      ansible.builtin.set_fact:
        patroni_is_master: >-
          {{
            (patroni_status.stdout
            | from_json
            | selectattr('Role', 'equalto', 'Leader')
            | map(attribute='Member')
            | list
            | first) == inventory_hostname
          }}

    - name: Set current master
      ansible.builtin.set_fact:
        patroni_current_master: >-
          {{
            (patroni_status.stdout
            | from_json
            | selectattr('Role', 'equalto', 'Leader')
            | map(attribute='Member')
            | list
            | first)
          }}
      when: patroni_is_master

    - name: Choose new leader
      ansible.builtin.set_fact:
        patroni_new_leader: >-
          {{
            (patroni_status.stdout
            | from_json
            | selectattr('Role', 'equalto', 'Replica')
            | map(attribute='Member')
            | difference([inventory_hostname])
            | first)
          }}
      when: patroni_is_master

    - name: Block for replica nodes
      when: not patroni_is_master
      block:
        - name: Stop Patroni service on replica
          ansible.builtin.service:
            name: patroni-tantor
            state: stopped
          register: patroni_stop_result

        - name: Install patroni-tantor-all (RHEL-like systems)
          when: ansible_os_family in ["RED", "Centos", "Rocky", "RedHat"]
          ansible.builtin.dnf:
            name: >-
              {{
                'patroni-tantor-all-' + patroni_package_version
                if patroni_package_version | length > 0
                else
                'patroni-tantor-all'
              }}
            state: present
            allow_downgrade: true

        - name: Install patroni-tantor-all (Alt linux)
          when: ansible_os_family in ["Altlinux"]
          community.general.apt_rpm:
            name: >-
              {{
                'patroni-tantor-all-' + patroni_package_version
                if patroni_package_version | length > 0
                else
                'patroni-tantor-all'
              }}
            state: present

        - name: Install patroni-tantor-all (Debian-like systems)
          when: ansible_os_family in ["Astra Linux", "Debian"]
          ansible.builtin.apt:
            name: >-
              {{
                'patroni-tantor-all=' + patroni_package_version
                if patroni_package_version | length > 0
                else
                'patroni-tantor-all'
              }}
            state: present
            allow_downgrade: true

        - name: Start Patroni service on replica
          ansible.builtin.service:
            name: patroni-tantor
            state: started

    - name: Block for master node
      when: patroni_is_master
      block:
        - name: Perform switchover if this node is the master
          ansible.builtin.command: >-
            /opt/tantor/usr/bin/patronictl
              -c {{ patroni_config_dir }}/{{ patroni_name | default(inventory_hostname) }}.yml
              switchover
              --leader {{ patroni_current_master }}
              --candidate {{ patroni_new_leader }}
              --force
              {{ patroni_scope }}
          register: patroni_switchover_result
          changed_when: patroni_switchover_result.changed
          failed_when: patroni_switchover_result.rc != 0

        - name: Wait for switchover to complete
          ansible.builtin.pause:
            minutes: 1

        - name: Stop Patroni service at previous master
          ansible.builtin.service:
            name: patroni-tantor
            state: stopped
          when: patroni_is_master
          register: patroni_stop_result

        - name: Install patroni-tantor-all (RHEL-like systems) at previous master
          when: ansible_os_family in ["RED", "Centos", "Rocky", "RedHat"]
          ansible.builtin.dnf:
            name: >-
              {{
                'patroni-tantor-all-' + patroni_package_version
                if patroni_package_version | length > 0
                else
                'patroni-tantor-all'
              }}
            state: present
            allow_downgrade: true

        - name: Install patroni-tantor-all (Alt linux) at previous master
          when: ansible_os_family in ["Altlinux"]
          community.general.apt_rpm:
            name: >-
              {{
                'patroni-tantor-all-' + patroni_package_version
                if patroni_package_version | length > 0
                else
                'patroni-tantor-all'
              }}
            state: present

        - name: Install patroni-tantor-all (Debian-like systems) at previous master
          when: ansible_os_family in ["Astra Linux", "Debian"]
          ansible.builtin.apt:
            name: >-
              {{
                'patroni-tantor-all=' + patroni_package_version
                if patroni_package_version | length > 0
                else
                'patroni-tantor-all'
              }}
            state: present
            allow_downgrade: true

        - name: Start Patroni service at previous master node
          ansible.builtin.service:
            name: patroni-tantor
            state: started
          when: patroni_is_master

- name: Create patroni unit file
  ansible.builtin.template:
    src: patroni-tantor.service.j2
    dest: /etc/systemd/system/patroni-tantor.service
    owner: root
    group: root
    mode: "0644"

- name: Recursively change ownership for the /var/lib/postgresql/ folder
  ansible.builtin.file:
    path: /var/lib/postgresql/
    state: directory
    recurse: true
    owner: "{{ patroni_system_user }}"
    group: "{{ patroni_system_group }}"

- name: Create patroni config directory
  ansible.builtin.file:
    path: "{{ patroni_config_dir }}"
    state: directory
    owner: "{{ patroni_system_user }}"
    group: "{{ patroni_system_group }}"
    mode: "0755"

- name: Create patroni log directory
  ansible.builtin.file:
    path: "{{ patroni_log_dir }}"
    state: directory
    owner: "{{ patroni_system_user }}"
    group: "{{ patroni_system_group }}"
    mode: "0755"
  when: patroni_log_destination |d('stderr', true) != 'stderr' # **

- name: Prepare callback scripts
  ansible.builtin.copy:
    src: "callbacks/{{ item.event }}"
    dest: "{{ item.script }}"
    owner: "{{ patroni_system_user }}"
    group: "{{ patroni_system_group }}"
    mode: "0750"
    backup: true
  with_items:
    - "{{ patroni_pg_callbacks }}"
  when: not( (item.script is none) or (item.script | trim | length == 0) )

- name: Install pg-configurator for Debian-like systems
  ansible.builtin.package:
    name: >-
      {{
        'pg-configurator-tantor-all=' + pg_configurator_package_version
        if pg_configurator_package_version | length > 0
        else
        'pg-configurator-tantor-all'
      }}
    state: present
  when: ansible_os_family in ["Astra Linux", "Debian"]

- name: Install pg_configurator for RHEL-like systems
  ansible.builtin.package:
    name: >-
      {{
        'pg_configurator-tantor-all-' + pg_configurator_package_version
        if pg_configurator_package_version | length > 0
        else
        'pg_configurator-tantor-all'
      }}
    state: present
  when: ansible_distribution in ["RED", "Centos", "Rocky", "Altlinux"]

- name: Create json configuration from local installation of pg_configurator
  become: true
  become_user: root
  ansible.builtin.command: |
    /opt/tantor/usr/bin/pg_configurator \
    --db-cpu="{{ hostvars[inventory_hostname]['ansible_processor_count'] }}" \
    --db-ram="{{ pg_conf_db_ram }}" \
    --db-disk-type="{{ pg_conf_db_disk_type }}" \
    --db-duty="{{ pg_conf_db_duty }}" \
    --pg-version="{{ major_version }}" \
    --output-format=patroni-json \
    --min-conns=200 \
    --max-conns=200 \
    --common-conf \
    --output-file-name='{{ patroni_config_dir }}/postgresql.json'
  args:
    creates: '{{ patroni_config_dir }}/postgresql.json'

- name: Get content of remote file
  ansible.builtin.slurp:
    src: '{{ patroni_config_dir }}/postgresql.json'
  register: patroni_remote_yaml

- name: Interpret remote file content as yaml
  ansible.builtin.set_fact:
    patroni_pg_conf_data: '{{ patroni_remote_yaml.content | b64decode | from_json }}'

- name: Check if patoni conf file exists
  ansible.builtin.stat:
    path: "{{ patroni_config_dir }}/{{ patroni_name | default(inventory_hostname) }}.yml"
  register: patroni_conf

- name: Get content of patroni conf file
  ansible.builtin.lineinfile:
    path: "{{ patroni_config_dir }}/{{ patroni_name | default(inventory_hostname) }}.yml"
    regexp: '(bulk_wal_dir|log_directory:\spg_log)'
    state: absent
  check_mode: true
  register: patroni_pg_wal_log_conf
  changed_when: false
  when: patroni_conf.stat.exists

- name: Block for wal-g setup
  when: ( patroni_bootstrap_method_name == "wal-g" ) or ( patroni_bootstrap_method_name == "walg" )
  block:
    - name: Install wal-g
      ansible.builtin.package:
        name:
          - wal-g-tantor-all
        state: present

    - name: Copy patroni custom bootstrap script
      ansible.builtin.template:
        src: patroni_custom_bootstrap_script.sh.j2
        dest: "{{ patroni_config_dir }}/patroni_custom_bootstrap_script.sh"
        mode: "0755"
        owner: "postgres"
        group: "postgres"

    - name: Copy wal-g configuration file
      ansible.builtin.template:
        src: walg.json.j2
        dest: "/var/lib/postgresql/.walg.json"
        mode: "0600"
        owner: "postgres"
        group: "postgres"

- name: Create patroni configuration file
  ansible.builtin.template:
    src: patroni.yml.j2
    dest: "{{ patroni_config_dir }}/{{ patroni_name | default(inventory_hostname) }}.yml"
    owner: "{{ patroni_system_user }}"
    group: "{{ patroni_system_group }}"
    mode: "0600"
  when: (not patroni_conf.stat.exists) or (patroni_pg_wal_log_conf.found)

- name: Replace patroni_pg_wal_dir string from the patroni template to real variable
  ansible.builtin.replace:
    path: "{{ patroni_config_dir }}/{{ patroni_name | default(inventory_hostname) }}.yml"
    regexp: 'bulk_wal_dir'
    replace: "{{ patroni_pg_wal_dir }}"
  when: patroni_pg_wal_dir is defined

- name: Replace pg_log string from the patroni template to real variable
  ansible.builtin.replace:
    path: "{{ patroni_config_dir }}/{{ patroni_name | default(inventory_hostname) }}.yml"
    regexp: 'log_directory:\spg_log'
    replace: "log_directory: {{ patroni_pg_log_dir }}"
  when: patroni_pg_log_dir is defined

- name: Copy keys/certs from etcd
  become: true
  become_user: root
  with_items:
    - f: '{{ etcd_pki_key_src }}'
      d: '{{ patroni_config_dir }}'
      m: '0400'
    - f: '{{ etcd_pki_cert_src }}'
      d: '{{ patroni_config_dir }}'
      m: '0600'
    - f: '{{ etcd_pki_ca_cert_src }}'
      d: '{{ patroni_config_dir }}'
      m: '0600'
  ansible.builtin.copy:
    src: '{{ item.f }}'
    dest: '{{ item.d }}'
    owner: postgres
    group: postgres
    mode: '{{ item.m }}'
  notify: Restart patroni

- name: Ensure patroni is running
  ansible.builtin.systemd_service:
    name: patroni-tantor.service
    state: started
    daemon_reload: true
    enabled: true
  tags: [patroni]

- name: Wait for patroni to run
  ansible.builtin.wait_for:
    path: /var/run/postgresql/.s.PGSQL.{{ patroni_pg_port }}

- name: Create replicator role
  vars:
    ansible_python_interpreter: "/opt/tantor/usr/bin/python3"
  community.postgresql.postgresql_user:
    db: postgres
    name: "{{ patroni_replication_username }}"
    password: "{{ patroni_replication_password }}"
    encrypted: true
    role_attr_flags: REPLICATION
    state: present
    port: "5432"
  become: true
  become_user: postgres

- name: Check if fullbackup exists
  when: ( patroni_bootstrap_method_name == "wal-g" ) or ( patroni_bootstrap_method_name == "walg" )
  ansible.builtin.command:
    cmd: /opt/tantor/usr/bin/wal-g --config /var/lib/postgresql/.walg.json backup-list
  register: patroni_if_backup_exists
  changed_when: false

- name: Perform initial fullbackup
  when:
    - ( patroni_bootstrap_method_name == "wal-g" ) or ( patroni_bootstrap_method_name == "walg" )
    - "'No backups found' in patroni_if_backup_exists.stderr"
  ansible.builtin.shell:
    cmd: >
      /opt/tantor/usr/bin/wal-g
      --config /var/lib/postgresql/.walg.json
      backup-push $(/opt/tantor/db/{{ major_version }}/bin/psql -d postgres -c "SHOW data_directory;" -t -A)
  changed_when: "'No backups found' in patroni_if_backup_exists.stderr"
  become: true
  become_user: postgres
