---

- name: Install pgbouncer-tantor-all (RHEL-like systems)
  when: ansible_os_family in ["RED", "Centos", "Rocky", "RedHat"]
  ansible.builtin.yum:
    name: >-
      {{
        'pgbouncer-tantor-all-' + pgbouncer_package_version
        if pgbouncer_package_version | length > 0
        else
        'pgbouncer-tantor-all'
      }}
    state: present
    allow_downgrade: true

- name: Install pgbouncer-tantor-all (Debian-like systems)
  when: ansible_os_family in ["Astra Linux", "Debian"]
  ansible.builtin.apt:
    name: >-
      {{
        'pgbouncer-tantor-all=' + pgbouncer_package_version
        if pgbouncer_package_version | length > 0
        else
        'pgbouncer-tantor-all'
      }}
    state: present
    allow_downgrade: true

- name: Create conf directory
  ansible.builtin.file:
    path: "/opt/tantor/etc/pgbouncer"
    state: directory
    owner: postgres
    group: postgres
    mode: "0755"

- name: Write pgbouncer.ini
  ansible.builtin.template:
    src: pgbouncer.ini.j2
    dest: /opt/tantor/etc/pgbouncer/pgbouncer.ini
    backup: true
    owner: postgres
    group: postgres
    mode: "0755"
  notify: Restart pgbouncer-tantor

- name: Create log and pid directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: postgres
    group: postgres
    mode: "0755"
  with_items:
    - "/opt/tantor/var/log/pgbouncer"
    - "/var/run/pgbouncer-tantor"
  notify: Restart pgbouncer-tantor

- name: Check if postgresql node is in master state
  ansible.builtin.command:
    cmd: su - postgres -c "psql -A -t -d postgres -c \"SELECT pg_is_in_recovery();\""
  changed_when: false
  register: psql_node_status

- name: Create pgbouncer role
  vars:
    ansible_python_interpreter: "/opt/tantor/usr/bin/python3"
  community.postgresql.postgresql_user:
    login_host: 127.0.0.1
    db: postgres
    name: "{{ pgbouncer_auth_user }}"
    password: "{{ pgbouncer_auth_user_passw }}"
    encrypted: true
    role_attr_flags: REPLICATION
    state: present
    port: "5432"
  become: true
  become_user: postgres
  when: psql_node_status.stdout == 'f'

- name: Create userlist for PGbouncer
  ansible.builtin.file:
    path: /opt/tantor/etc/pgbouncer/userlist.txt
    owner: postgres
    group: postgres
    mode: "0644"

- name: Check if pgbouncer missing in /opt/tantor/etc/pgbouncer/userlist.txt file
  ansible.builtin.lineinfile:
    path: /opt/tantor/etc/pgbouncer/userlist.txt
    regexp: '\"pgbouncer\"\s\"(?:md5\w+\"|SCRAM-SHA-256.*\")'
    state: absent
  check_mode: true
  register: pgbouncer_userlist
  changed_when: false

- name: Run query for creation of userlist.txt
  vars:
    ansible_python_interpreter: "/opt/tantor/usr/bin/python3"
  community.postgresql.postgresql_query:
    login_db: postgres
    query: |
      COPY (SELECT usename, passwd FROM pg_shadow WHERE usename='pgbouncer')
      TO '/opt/tantor/etc/pgbouncer/userlist.txt'
      WITH (FORMAT CSV, DELIMITER ' ', FORCE_QUOTE *)
  when: ( groups['inv_cluster'] | length == 1  ) or (not pgbouncer_userlist.found)
  become: true
  become_user: postgres
  notify: Restart pgbouncer-tantor

- name: Upload pgbouncer_prepare.sql
  become: true
  become_user: root
  with_items:
    - f: "{{ playbook_dir + '/roles/pgbouncer/sql/pgbouncer_prepare.sql' }}"
      d: '/opt/tantor/etc/pgbouncer'
      m: '0400'
  ansible.builtin.copy:
    src: '{{ item.f }}'
    dest: '{{ item.d }}'
    owner: postgres
    group: postgres
    mode: '{{ item.m }}'

- name: Create pgbouncer namespace
  vars:
    ansible_python_interpreter: "/opt/tantor/usr/bin/python3"
  community.postgresql.postgresql_script:
    db: postgres
    path: /opt/tantor/etc/pgbouncer/pgbouncer_prepare.sql
  changed_when: false
  when: psql_node_status.stdout == 'f'

- name: Create pgbouncer unit file
  ansible.builtin.template:
    src: pgbouncer.service.j2
    dest: /etc/systemd/system/pgbouncer-tantor.service
    owner: root
    group: root
    mode: "0644"
  notify: Restart pgbouncer-tantor
